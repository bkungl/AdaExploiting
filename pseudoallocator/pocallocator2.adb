with Ada.Text_IO;with Ada.Text_IO;
with Ada.Integer_Text_IO;
 with System.Address_Image;

procedure pocallocator2 is
   pragma Suppress_All;
   
   type Index is range 0 .. 3;
   type Values is array (Index) of Integer;

   -- node object
   type Node;
   type Node_Ptr is access all Node; -- cant aliased this, nneed subtype indication
   type Node is record
        -- needs to be array of 4
        Data: aliased Values;
        Id: aliased Integer;
        Next: aliased Node_Ptr;
   end record;
   
   -- put the variables BEFORE the procedures to make them global!
   -- setup
   type Size is range 0 .. 15;
   type Global_Memory is array (Size) of aliased Node;
   --globals:
   Memory :  aliased Global_Memory;
   Free_List : aliased Node_Ptr;
   -- a place to store data:
   type Used_Ptrs is array (Size) of aliased Node_Ptr;
   In_Use: aliased Used_Ptrs;
   SizeIndex: Size := 0;
   
   -- initialize memory
   procedure Init is 
      --X : aliased Node := Node'(100, null);
      TempInt : Integer := 0;
      Temp : Values := (TempInt, TempInt, TempInt, TempInt);
      Spam : Values := (-1, -1, -1, -1);
   begin
      --Memory(0) := X;
      Free_List := Memory(0)'Unchecked_Access;
      
      for I in (Size) loop
         --   Memory(I) := Node'(Temp, TempInt, null);
         
         -- init pointers
         if I < Size'Last then
            Memory(I).Next := Memory(I+1)'Unchecked_Access;
         else
            -- for last value of array
            Memory(I).Next := null;
         end if;
         
         -- init values
         Memory(I).Id := TempInt;
         Memory(I).Data := Temp;
         TempInt := TempInt + 1;
         Temp := (TempInt, TempInt, TempInt, TempInt);
      end loop;
-- fill in_use with -1s
      --for I in (Size) loop
         --In_Use(I) := new Node'(Spam, -1, null);
      --   --In_Use(I) := null;
     --    end loop;
      
      
   end Init;
   
   procedure AllocationA(Return_To_User: out Node_Ptr) is
      
   begin
      
      -- maybe this should be a new node, it should be from memory...
      --In_Use(SizeIndex) := new Node'(Return_To_User.Data, Return_To_User.Id, null);
      In_Use(SizeIndex) := Free_List;
      
      
      SizeIndex := SizeIndex + 1;
      if Return_To_User /= null then
         --error here!
         Return_To_User := Return_To_User.Next;
        
      end if;
      --Ada.Text_IO.Put_Line("checkpoint");
      --In_Use(SizeIndex).Next := null;
     -- Ada.Text_IO.Put_Line("checkpoint");

   end AllocationA;
   
   -- this is broken! 
   -- wait nvm, i updated size index and everythign works now... test it later
   procedure Free(Given_Back: in out Node_Ptr; Index: in Size) is
      Temp : Node_Ptr;
   begin
      Temp  := Given_Back;
      Given_Back := In_Use(Index);
      Given_Back.Next := Temp;
      
      SizeIndex := SizeIndex -1;
      In_Use(Index) := null;
      
   end Free;
   
   
   
   -- works
   procedure ChangeData(Node_Index: in Size; Node_Data_Index: in Index; ChangeVal: in Integer) is 
   begin
      -- todo might need to make this a temp node, change val, and set pointer to the new node
      In_Use(Node_Index).Data(Node_Data_Index) := ChangeVal;
   end ChangeData;
   
   
   -- works
   procedure ReadNode(Node_Index: in Size; Node_Data_Index: in Index) is      
   begin
      Ada.Integer_Text_IO.Put(In_Use(Node_Index).Data(Node_Data_Index)); 
      --In_Use(Node_Index).
      end ReadNode;
   
   procedure PrintPtr(n: in out Node_Ptr) is 
   begin 
      --Put_Line("node at address " & System.Address_Image(n.all'address)); --'
      Ada.Text_IO.Put(" " & System.Address_Image(n.all'address));
   end PrintPtr; 
   
   
   
   procedure VisualizeArray(Input: in Global_Memory) is
     
   begin
       for I in (Size) loop        
         Ada.Text_IO.Put("[");
         Ada.Integer_Text_IO.Put(Input(I).Data(0));         
         Ada.Integer_Text_IO.Put(Input(I).Data(1));         
         Ada.Integer_Text_IO.Put(Input(I).Data(2));        
         Ada.Integer_Text_IO.Put(Input(I).Data(3));
         Ada.Text_IO.Put("]");
         Ada.Text_IO.Put_Line("");
      end loop;
      Ada.Text_IO.Put_Line("");
   end VisualizeArray;
   
   
   
   procedure VisualizeFreeListHelper(Head: in out Node_Ptr) is
      
   begin
      PrintPtr(Head);
      Ada.Integer_Text_IO.Put(Head.Id);
      if Head.next /= null then     
         VisualizeFreeListHelper(Head.Next);      
      end if;
   end VisualizeFreeListHelper;
   
   procedure VisualizeFreeList(Head: in out Node_Ptr) is
   begin
      
      if Head /= null then
         Ada.Text_IO.Put("List: ");
         VisualizeFreeListHelper(Head);
      end if;
      --Ada.Text_IO.Put("List: ");
      Ada.Text_IO.Put_Line("");
   end VisualizeFreeList;
   
   --this shoulv visualize an array of node pointers (not nodes)
   procedure VisualizeInUse is
   begin
      Ada.Text_IO.Put_Line("In Use:");
      -- need to figure out how to print a range, not an integer... 
      --shouldnt be trying to print the array if its length is 0
      
      --Ada.Integer_Text_IO.Put(Integer'Image(SizeIndex));
      if SizeIndex /= 0 then
         Ada.Text_IO.Put_Line("SizeIndex is > 0");
         for I in (Size) loop
            --for I of SizeIndex loop  
            if I < SizeIndex then
               Ada.Text_IO.Put("[");
               -- issue here:
               PrintPtr(In_Use(I));
               Ada.Integer_Text_IO.Put(In_Use(I).Id);
               Ada.Text_IO.Put("]");
               Ada.Text_IO.Put_Line("");
            end if;
         end loop;
      else
         Ada.Text_IO.Put_Line("SizeIndex is 0");
      end if;
   end VisualizeInUse; 
   
   
      
begin
   Init;
   
   VisualizeArray(Memory);
   VisualizeFreeList(Free_List);
   VisualizeInUse;
   
   AllocationA(Free_List);
   
   VisualizeArray(Memory);
   VisualizeFreeList(Free_List);
   VisualizeInUse;
   
   Free(Free_List, 0);
   
   VisualizeArray(Memory);
   VisualizeFreeList(Free_List);
   VisualizeInUse;
   
end pocallocator2;

