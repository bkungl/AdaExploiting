with Ada.Integer_Text_IO;
with Ada.Unchecked_Conversion;
with Arena_Pools;
use  Arena_Pools;
with Ada.Text_IO; Use Ada.Text_IO;
with System.Address_Image;

procedure arena_pool_test is
   pragma Suppress(All_Checks);
   
   Pool : Arena_Pools.Arena (90);
   type Integer_Ptr is access Integer;
   for Integer_Ptr'Storage_Pool use Pool;
   
   -- Node stuff from pseudo-allocator
   type Index is new Integer range 0 .. 3;
   type Values is array (Index) of Integer;
   type ExploitIndex is new Integer range 0 .. 10000;
   type Node;
   type Node_Ptr is access all Node;
   -- this time, make sure its part of a pool
   for Node_Ptr'Storage_Pool use Pool; 
   type Node is record
        Data: aliased Values;
   end record;
   
   -- poc exploiter
   function EIndex_to_Index is
      new Ada.Unchecked_Conversion (Source => ExploitIndex,
                                    Target => Index);
   
   --change Node
   procedure ChangeNode(Node: in Node_Ptr; ChangeIndex: in Index; ChangeVal: in Integer) is
   begin
      Node.Data(ChangeIndex) := ChangeVal;
   end ChangeNode;
   
   -- visualize node
   procedure ShowNode(Input: in Node_Ptr) is
   begin
      Ada.Text_IO.Put("[");
         Ada.Integer_Text_IO.Put(Input.Data(0));         
         Ada.Integer_Text_IO.Put(Input.Data(1));         
         Ada.Integer_Text_IO.Put(Input.Data(2));        
         Ada.Integer_Text_IO.Put(Input.Data(3));
      Ada.Text_IO.Put("]");
      Ada.Text_IO.Put_Line("");
      end ShowNode;
   
   X : Node_Ptr := new Node'(Data => (1, 1, 1, 1));
   Y : Node_Ptr := new Node'(Data => (2, 2, 2, 2));
begin
   Ada.Text_IO.Put_Line("Pool start location: " & System.Address_Image(Pool'Address));   
   Ada.Text_IO.Put_Line("Pool size: " & Integer'Image(Pool'Size));
   Ada.Text_IO.Put_Line("X start location: " & System.Address_Image(X'Address)); 
   Ada.Text_IO.Put_Line("Y start location: " & System.Address_Image(Y'Address));
   Y.Data(EIndex_to_Index(6)) := 9999;
   ChangeNode(Y, EIndex_to_Index(2), 7777);
   ShowNode(X);
   ShowNode(Y);
   
end arena_pool_test;