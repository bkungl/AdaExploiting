with Arena_Pools;
use  Arena_Pools;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; Use Ada.Text_IO;
with Ada.Integer_Text_IO;
with System.Address_Image;


procedure implicit_uaf is
   pragma Suppress(All_Checks);

   type Integer_Ptr is access all Integer;
   G : Integer_Ptr;
   
   type length is range 0..35;
   type arr is array (length) of integer;

   procedure one is 
      Pool1: aliased Arena_Pools.Arena(163);
      type Integer_Ptr is access all Integer;
      for Integer_Ptr'Storage_Pool use Pool1;
      
      A : Integer_Ptr;
      B : Integer_Ptr;
      C : Integer_Ptr;
      D : Integer_Ptr;
      
      function convert is new Ada.Unchecked_Conversion(Source => one.Integer_Ptr, Target => implicit_uaf.Integer_Ptr);
   begin
      
      A := new Integer'(48879);
      B := new Integer'(48879);
      c := new integer'(48879);
      d := new integer'(48879);

      G := convert(A);
   end one;
   
   procedure three is 
	
   begin
	--G.all := 9;
  	G.all := 16#0804a3da#;
   end three;
   
   procedure two(X: in integer) is 
	
      type Integer_Ptr is access all Integer;
      B : Integer;
      arr1 : arr; 
   begin
      arr1 := (16#00#, 16#01#, 16#02#, 16#03#, 16#04#,16#05#,16#06#,16#07#,16#08#,16#09#,16#0a#,16#0b#,
16#0c#, 16#0d#, 16#0e#, 16#0f#, 16#10#, 16#11#, 16#12#, 16#13#,16#14#,16#15#,16#16#,16#17#,16#18#,16#19#,16#1a#,16#0b#,
16#1c#, 16#1d#, 16#1e#, 16#1f#, 16#20#, 16#21#, 16#22#, 16#23#);
      B := 48879;
      three;
   end two;

   procedure four is

   begin
	Ada.Text_IO.Put_Line("Hello World!");
   end four;
   

begin
   four;
   one;
   two(23);
end implicit_uaf;
