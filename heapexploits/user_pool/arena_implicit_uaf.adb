with Arena_Pools;
use  Arena_Pools;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; Use Ada.Text_IO;
with Ada.Integer_Text_IO;
with System.Address_Image;




procedure arena_implicit_uaf is

   pragma Suppress(All_Checks);
   
   
   -- global data
   type Node;
   type Node_Ptr is access all Node;
   type Node is record
        Id: aliased Integer;
        Next: aliased Node_Ptr;
   end record;
   Y : Node_ptr;
   
   
   
   procedure init is
      Pool : aliased Arena_Pools.Arena (90);
      type Node;
      type Node_Ptr is access all Node;
      for Node_Ptr'Storage_Pool use Pool;
      type Node is record
         Id: aliased Integer;
         Next: aliased Node_Ptr;
      end record;
      
      X : Node_Ptr;
   begin     
      X := new Node'(Id   => 1111,
                     Next => null);
      
      Y.Next := X;
   end init;
   


   procedure garbage is
      Pool : aliased Arena_Pools.Arena (90);
      type Node;
      type Node_Ptr is access all Node;
      for Node_Ptr'Storage_Pool use Pool;
      type Node is record
         Id: aliased Integer;
         Next: aliased Node_Ptr;
      end record;
      
      X : Node_Ptr;
      Y : Node_Ptr;
      Z : Node_Ptr;
   begin
      X := new Node'(Id   => 2222,
                     Next => null);
      Y := new Node'(Id   => 2222,
                     Next => null);
      Z := new Node'(Id   => 2222,
                     Next => null);
      
   end garbage;
   

begin
   Y := new Node'(Id   => 5555,
                  Next => null);
   
   
   
   --procedure to make first pool, update global
   init;
   
   -- random procedure to make a pool or whatever
   garbage;
   
   --try to access global which should be different data now
   --Ada.Text_IO.Put_Line(" " & System.Address_Image(Y'Address)); 
   Ada.Integer_Text_IO.Put(Y.Next.Id);
   
end arena_implicit_uaf;
