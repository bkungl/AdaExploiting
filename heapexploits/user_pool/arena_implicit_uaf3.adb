with Arena_Pools;
use  Arena_Pools;
with Ada.Unchecked_Conversion;
with Ada.Text_IO; Use Ada.Text_IO;
with Ada.Integer_Text_IO;
with System.Address_Image;


procedure arena_implicit_uaf3 is
   pragma Suppress(All_Checks);

   type Integer_Ptr is access all Integer;
   G : Integer_Ptr;
   
   procedure one is 
      Pool1: aliased Arena_Pools.Arena(62);
      type Integer_Ptr is access all Integer;
      for Integer_Ptr'Storage_Pool use Pool1;
      
      A : Integer_Ptr;
      B : Integer_Ptr;
      C : Integer_Ptr;
      D : Integer_Ptr;
      
      function convert is new Ada.Unchecked_Conversion(Source => one.Integer_Ptr,
                                                        Target => arena_implicit_uaf3.Integer_Ptr);
   begin
      
      A := new Integer'(50);
      B := new Integer'(50);
	c := new integer'(50);
      d := new integer'(50);

      G := convert(A);
   end one;
   
   
   procedure two is 
      Pool2: aliased Arena_Pools.Arena(20);
      type Integer_Ptr is access all Integer;
      for Integer_Ptr'Storage_Pool use Pool2;
      
      B : Integer_Ptr;

      function convert is new Ada.Unchecked_Conversion(Source => two.Integer_Ptr,
                                                        Target => arena_implicit_uaf3.Integer_Ptr);
   begin
      B := new Integer'(2748);
      G := convert(B); -- abc in hex; hopefully this overwrites SP

      end two;
   
   
begin
   one;
   two;
end arena_implicit_uaf3;
