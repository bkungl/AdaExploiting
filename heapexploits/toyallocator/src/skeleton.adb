with Ada.Text_IO;                       
    use Ada.Text_IO;
with Ada.Integer_Text_IO;           
    use Ada.Integer_Text_IO;

procedure skeleton is

   
   ----------- ALLOCATOR PROCEDURES ----------- 
   -- this is the array that the node holds
   type Index is range 1 .. 4;
   type Values is array (Index) of Integer;

   -- node object
   type Node;
   type Node_Ptr is access Node;
   type Node is record
        -- needs to be array of 4
        Data: Values;
        Id: Integer;
        Next: Node_Ptr;
   end record;

   -- this is the global unallocated data
   -- DONT NEED FREELIST OBEJECT. PUT NODE POINTER ON HEAP
   -- type FreeList;
   -- type FreeList is record
   --   Head: Node_Ptr;
   -- end record;
      
   
   -- this is the global allocated data
   -- DONT NEED STORAGEPOOL OBEJCT. PUT NODE POINTER ON HEAP
   -- type StoragePool;
   -- type StoragePool is record
   --   Head: Node_Ptr;
   -- end record;
   
   -- procedure to allocate data
   -- request a node from the freelist to add to the storage pool
   procedure Allocate is
   begin
      -- 
      null;
      
   end Allocate;
   
   -- procedure to deallocate/free data
   -- start with linked list of 10 nodes. allocate pulls these from free list to storagepool
   -- free removes the node from the storagepool and returns to freelist
   -- in order?
   procedure Free is
   begin
      null;
   end Free;
   
   
   
   
   ----------- PRINTING/DISPLAY PROCEDURES --------------
   procedure PrintNode is
   begin
      null;
   end PrintNode;
   
   procedure PrintStorage is
   begin
      null;
   end PrintStorage;
   
   procedure PrintFree is
   begin
      null;
   end PrintFree;
     
   
   
   
   
   
   ----------- HEAP STUFF ----------------
   StoragePool : Node_Ptr := null;
   FreeList : Node_Ptr := null;
   
begin
   null;
end skeleton;
