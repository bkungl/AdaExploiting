with Ada.Text_IO;
    use Ada.Text_IO;
with Ada.Integer_Text_IO;
    use Ada.Integer_Text_IO;

procedure Main is


   ----------- ALLOCATOR PROCEDURES -----------
   -- this is the array that the node holds
   type Index is range 0 .. 3;
   type Values is array (Index) of Integer;

   -- node object
   type Node;
   type Node_Ptr is access Node;
   type Node is record
        -- needs to be array of 4
        Data: Values;
        Id: Integer;
        Next: Node_Ptr;
   end record;

   -- procedure to allocate data
   -- request a node from the freelist to add to the storage pool
   procedure Allocate is
   begin
      --
      null;

   end Allocate;

   -- procedure to deallocate/free data
   -- start with linked list of 10 nodes. allocate pulls these from free list to storagepool
   -- free removes the node from the storagepool and returns to freelist
   -- in order?
   procedure Free is
   begin
      null;
   end Free;



   -- source: https://stackoverflow.com/questions/26682057/link-list-in-ada
   procedure Append_Node(InputVals: Values; Id: Integer; New_Node: in out Node_Ptr) is
    begin
      if New_Node = null then
        New_Node := new Node'(InputVals, Id, null);
        Ada.Text_IO.Put("Adding Head node");
        Ada.Text_IO.New_Line;
      else
        if New_Node.Next /= null then
          Append_Node(InputVals, Id, New_Node.Next);
        else
          Ada.Text_IO.Put("Adding Next node");
          Ada.Text_IO.New_Line;
          New_Node.Next := new Node'(InputVals, Id, null);
        end if;
      end if;
   end Append_Node;


   procedure Print_List(Node: in Node_Ptr) is
      --type Index2 is range 0 .. 3;
      Counter: Index := 0;
      OutsideCounter: Integer := 0;
    begin
      if Node /= null then
         -- print the node
         Ada.Text_IO.Put("ID: ");
         Ada.Integer_Text_IO.Put(Node.Id);
         Ada.Text_IO.Put("     [");
         for I in Node.Data'Range loop
            if Node.Data(I) /= 0 then
               Ada.Integer_Text_IO.Put(Node.Data(I));
            end if;
         end loop;
         Ada.Text_IO.Put("]");
         Ada.Text_IO.New_Line;

         --print using recursion
         Print_List(Node.Next);
      end if;
   end Print_List;







   ----------- PRINTING/DISPLAY PROCEDURES --------------
   procedure PrintNode is
   begin
      null;
   end PrintNode;

   procedure PrintStorage is
   begin
      null;
   end PrintStorage;

   procedure PrintFree is
   begin
      null;
   end PrintFree;






   ----------- HEAP STUFF ----------------
   StoragePool : Node_Ptr := null;
   FreeList : Node_Ptr := null;



   temp1: Values := (1,1,1,1);
   temp2: Values := (2,2,2,2);
   temp3: Values := (3,3,3,3);
   temp4: Values := (4,4,4,4);
   temp5: Values := (5,5,5,5);
begin
   --null;
   Append_Node(temp1, 1, FreeList);
   Append_Node(temp4, 2, FreeList);
   Append_Node(temp4, 3, FreeList);
   Append_Node(temp4, 4, FreeList);
   Append_Node(temp5, 5, FreeList);

   Ada.Text_IO.Put_Line("Printing Free List");
   Print_List(FreeList);

   Ada.Text_IO.Put_Line("Allocating data to Storage Pool");
   -- allocate here

   -- print storage pool


end Main;
