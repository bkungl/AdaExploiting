with Ada.Text_IO;
with Ada.Integer_Text_IO;

procedure pocallocator is
   
   pragma Suppress_All;
   
   type Index is range 0 .. 3;
   type Values is array (Index) of Integer;

   -- node object
   type Node;
   type Node_Ptr is access all Node;
   type Node is record
        -- needs to be array of 4
        Data: Values;
        Id: Integer;
        Next: Node_Ptr;
   end record;
   
   
   -- global memory 
   type Size is range 0 .. 15;
   type Memory is array (Size) of Node_Ptr;
   Global_Mem : Memory;
   
   -- global free list
   Free_List : Node_Ptr;
   
   -- set up global memory
   procedure Initialize is
      
      TempInt : Integer := 0;
      Temp : Values := (TempInt, TempInt, TempInt, TempInt);
   begin
      -- initialize memory
      for I in (Size) loop
         Global_Mem(I) := new Node'(Temp, TempInt, null);
         TempInt := TempInt + 1;
         Temp := (TempInt, TempInt, TempInt, TempInt);
      end loop;
      
      -- set up pointers
      for J in (Size) loop
         if J < Size'Last then
            Global_Mem(J).Next := Global_Mem(J+1);
         end if;
         
      end loop;
      
      -- point free list to first element 
      Free_List := Global_Mem(0);
   end Initialize;
   
   procedure Allocation(Return_To_User: out Node_Ptr) is
      
   begin
      Return_To_User := Free_List;
      
      --advance pointer, node is allocated
      if Free_List /= null then 
         Free_List := Free_List.Next;
         end if;
   end Allocation;
      
   procedure Free(Given_Back: in Node_Ptr) is
      
   begin
      Given_Back.Next := Free_List;
      Free_List := Given_Back;
   end Free;
   
   
   -- change a node's values array
   procedure ChangeData(Node_Index: in Size; Node_Data_Index: in Index; ChangeVal: in Integer) is 
   begin
      Global_Mem(Node_Index).Data(Node_Data_Index) := ChangeVal;
   end ChangeData;
   
   procedure VisualizeGlobalMemory is
     
   begin
       for I in (Size) loop        
         Ada.Text_IO.Put("[");
         Ada.Integer_Text_IO.Put(Global_Mem(I).Data(0));         
         Ada.Integer_Text_IO.Put(Global_Mem(I).Data(1));         
         Ada.Integer_Text_IO.Put(Global_Mem(I).Data(2));        
         Ada.Integer_Text_IO.Put(Global_Mem(I).Data(3));
         Ada.Text_IO.Put("]");
         Ada.Text_IO.Put_Line("");
      end loop;
      Ada.Text_IO.Put_Line("");
   end VisualizeGlobalMemory;
   
   procedure RunSimulator is 
      
   begin
      
      
      null;
   end RunSimulator;
   
  
      
   -- object to store used data:
   --type Size is range 0 .. 15;
   --type Utilized is array (Size) of Node_Ptr;
   In_Use : Memory;
begin
   
   Initialize;
   VisualizeGlobalMemory;
   
   Allocation(In_Use(0));
   
   -- nothing is removed from free list because the free list holds node pointers... if we request one, the pointer still stays?
   VisualizeGlobalMemory;
   
end pocallocator;
