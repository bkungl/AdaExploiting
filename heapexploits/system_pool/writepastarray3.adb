--write past array
with Ada.Unchecked_Deallocation;
with Ada.Unchecked_Conversion;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

procedure WritePastArray3 is
    pragma Suppress(All_Checks);
    type Integer_Ptr is access Integer;
    
    type Values is array (Integer range <>) of Integer_Ptr;
    
    type ExploitIndex is new Integer range -100 .. 100;
    
    procedure free is new Ada.Unchecked_Deallocation (Integer, Integer_Ptr);
    
    function convert is
      new Ada.Unchecked_Conversion (Source => ExploitIndex,
                                    Target => Integer);
    
    function bypass is
      new Ada.Unchecked_Conversion (Source => Character,
                                    Target => Integer);
    
    arr1 : aliased Values (1..2);
    arr2 : aliased Values (1..2);
    ei : ExploitIndex := 15;
begin
    arr1 := (new Integer'(1), new Integer'(1));
    arr2 := (new Integer'(5), new Integer'(5));
    
    --need to bypass:
    arr1(convert(1)) := new Integer'(bypass('c'));
    
    
    Ada.Integer_Text_IO.Put(arr1(1).all);
    Ada.Integer_Text_IO.Put(arr1(2).all);
    Ada.Integer_Text_IO.Put(arr2(1).all);
    Ada.Integer_Text_IO.Put(arr2(2).all);
    
end WritePastArray3;
